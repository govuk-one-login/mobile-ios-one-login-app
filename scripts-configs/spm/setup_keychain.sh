#!/usr/bin/env bash

# CONTEXT:
# This script mimics the 'aws codeartifact login' command
# This command cannot be run on the runner as the required applications will not have access to the keychain item generated

# OVERVIEW:
# This script fetches an AWS CodeArtifact authorisation token
# Fetches the URL of the ReadID AWS repository we want to access
# Uses 'swift package-registry login' to login to the repository
# Grants the required applications access to the generated keychain item

# Assign the first command-line argument to the variable Xcode_path
Xcode_path=$1

KEYCHAIN_PASSWORD=$(openssl rand -base64 20)
KEYCHAIN_NAME=dev.keychain

# Keychain set up
security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
security default-keychain -s "$KEYCHAIN_NAME"
security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
security set-keychain-settings "$KEYCHAIN_NAME"

# Add the keychain to existing keychain list
EXISTING_KEYCHAINS=( $( security list-keychains | sed -e 's/ *//' | tr '\n' ' ' | tr -d '"') )
sudo security list-keychains -s "$KEYCHAIN_NAME" "${EXISTING_KEYCHAINS[@]}"

# Fetch an authorisation token
CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain readid --domain-owner 101014119721 --query authorizationToken --region eu-west-1 --output text`

# Fetch the URL of the ReadID AWS repository we want to acess
CODEARTIFACT_REPO=`aws codeartifact get-repository-endpoint --region eu-west-1 --domain readid --domain-owner 101014119721 --repository ios-ui-saas --format swift --query repositoryEndpoint --output text`

# Login to swift package registry with the token and URL
swift package-registry login ${CODEARTIFACT_REPO}login --token $CODEARTIFACT_AUTH_TOKEN

SERVER=$(echo $CODEARTIFACT_REPO | sed  's/https:\/\///g' | sed 's/.com.*$/.com/g')

# Delete the keychain password generated by the login command
# This is to stop the keychain password pop-up from showing - which causes the build to hang
# The prompt is displayed as the correct applications do not yet have access to the keychain item
security delete-internet-password -a token -s $SERVER -r htps "$KEYCHAIN_NAME"

# Applications that will have access to use the item
PREAPPROVED_APPLICATION_LIST=(-T /usr/bin/security -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/productsign -T $Xcode_path/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-package -T $Xcode_path/Contents/Developer/usr/bin/xcodebuild)

# Update keychain item with applications
security add-internet-password -a token -s $SERVER -w $CODEARTIFACT_AUTH_TOKEN -r htps -U "${PREAPPROVED_APPLICATION_LIST[@]}" $HOME/Library/Keychains/"$KEYCHAIN_NAME"

security set-internet-password-partition-list -a token -s $SERVER -S "com.apple.swift-package,com.apple.security,com.apple.dt.Xcode,apple-tool:,apple:,codesign" -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
security find-internet-password -s $SERVER